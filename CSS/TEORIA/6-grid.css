/*--------------- Gird -> CONCEPTOS BASICOS ------------------------
-> Grid Container:
Es el elemento padre que contiene todos los elementos del grid.
Se activa con display: grid o display: inline-grid.

-> Grid Item:
Son los elementos hijos directos del grid container.
Estos son los elementos que se colocan dentro del grid.

-> Grid Cell:
Es la unidad básica del grid, definida por la intersección de una fila y una columna.

-> Grid Tracks (Column y Row):
Son las filas (rows) y columnas (columns) que forman el grid.
Se definen usando grid-template-rows y grid-template-columns.

-> Grid Area:
Es un conjunto de celdas que abarca una o más filas y columnas.
Se define usando grid-area.

-> Grid Line (Column y Row):
Son las líneas divisorias entre las filas y columnas.
Se usan para posicionar elementos específicos en el grid.

/*-------------------- PROPIEDADES --------------------
1. Definir Filas y Columnas (grid-container)

grid-template-rows: 100px 200px auto; 
grid-template-columns: 1fr 2fr 1fr;

-> Unidades útiles :

auto: Ajusta el tamaño según el contenido.
fr: Fracción del espacio disponible.
repeat(cantidad, tamaño): Repite patrones.

--------------------------------------------------------
2. Espaciado entre filas y columnas (grid container)
grid-row-gap: 10px;
grid-column-gap: 20px;

*SHORTHAND*
grid-gap: 10px 20px; /filas, columnas/

*LO MISMO*
gap: 10px 20px; /filas, columnas/
------------------------------------
3. Posicionamiento de elementos (grid-items)
Define dónde comienza y termina un elemento en las filas/columnas.

grid-row-start: 1;
grid-row-end: 2;

grid-column-start: 2;
grid-column-end: 4;

*SHORTHAND*
grid-column: 1 / 3;
grid-row: 1 / span 2; /ocupa 2 filas/

-------------------- GRID IMPLÍCITO Y EXPLÍCITO --------------------
-> Grid Explícito: Es el grid definido explícitamente con
grid-template-rows: 100px 200px auto; 
grid-template-columns: 1fr 2fr 1fr;

-> Grid Implícito: Se genera automáticammente cuando 
hay elementos que no caben en el grid explícito.

1. Define el tamaño predeterminado de las filas implícitas.
grid-auto-rows: 150px; (igual que template)

2. Define el tamaño predeterminado de las columnas implícitas
grid-auto-columns: 1fr; (igual que template)

3. Controla cómo se colocan los elementos implícitos
grid-auto-flow: row; /por defecto/
grid-auto-flow: column;
grid-auto-flow: dense; /rellena huecos/

-------------------- GRID DINÁMICO --------------------
1. minnax() -> Define un rango mínimo y máximo para el tamaño de filas/columnas.
2. min-content -> El tamaño mínimo necesario para mostrar el contenido.
3. max-content -> El tamaño máximo necesario para mostrar el contenido.

4. auto-fill -> Crea tantas columnas/filas como quepan en el contenedor.
5. auto-fit -> Adapta las columnas/filas existentes al espacio disponible

-------------------- ALINEACIÓN Y CONTROL DE FLUJO --------------------
Diferencia con flex: la alineación es dentro de cada celda y no
alineación total del flex container. Cada celda sería un "flex container"

1. Alineación del Contenedor
justify-content: start | end | center | space-around | space-between | space-evenly;
align-content: start | end | center | space-around | space-between | space-evenly;

*SHORTHAND*
place-content: center stretch; *align - justify*

2. Alineación de Items
justify-items: start | end | center | stretch (default) ;
align-items: start | end | center | stretch (default);

*SHORTHAND*
place-items: center stretch; *align - justify*

-> Más todos los de flex
"space-arround
*space-between
*space-evenly

-------------------- APLICADO AL GRID ITEM --------------------
align-self: start | end | center | stretch (default);
justify-self: start | end | center | stretch (default);

*SHORTHAND*
place-self: center center; *align - justify*

-> Cambia el orden de los elementos 
order: 1;

-------------------- AREAS EN GRID --------------------
1. Define áreas nombradas en el grid (container)
grid-template-areas:
  "header header header"
  "aside main main"
  "footer footer footer";

2. Asignar áreas a elementos: (items)
grid-area: header;

-------------------- NOMBRES A LAS LINEAS --------------------
n CSS Grid, las líneas son las divisiones entre las filas y columnas. Por ejemplo:

Si tienes 3 columnas, habrá 4 líneas verticales (una antes de cada columna y una después de la última).
Si tienes 2 filas, habrá 3 líneas horizontales (una antes de cada fila y una después de la última).
Estas líneas son como "marcas" que puedes usar para posicionar elementos en el grid.

grid-template-columns: [inicio] 1fr [medio] 1fr [fin];
grid-template-rows: [fila1-inicio] 100px [fila1-fin fila2-inicio] 200px [fila2-fin];

[inicio] es el nombre de la primera línea.
[medio] es el nombre de la línea entre la primera y segunda columna.
[fin] es el nombre de la última línea.
/*--------------------------------------------------------------------------------------------------------/


/*Son propiedades que se utilizan para definir el tamaño
 y la disposición de las filas y columnas en una cuadrícula.*/

.contenedor {
    display: grid;
    grid-template-rows: 50% 100px auto 10vw;
    /*minmax(300px, 400px): como minimo 300px y como maximo 400px*/
    /*'mincontent' establece el tamaño minimo de cada una de las celdas*/
    /*'max-content' establece el tamaño maximo de cada una de las celdas*/

    /*'auto-fill' -> crea columnas invisibles para ir rellenando/
    /*'auto-fit' -> adapta las columnas existentes para rellenar*/
    grid-template-columns: 10px repeat(auto-fill, minmax(min-content, max-content)) 10px;
    grid-template-columns: 1fr repeat(4, minmax(100px, 400px)) 1fr; 

    /* SHORTHAND */
    grid-template: repeat(3, 1fr);
    grid-template: 15% 15em auto / 1fr 2fr auto;


/*------------------------------------------------------------------------------*/  
/*La propiedad grid-gap en CSS se utiliza para establecer el espacio entre las filas y columnas en una cuadrícula creada con display: grid. Es un atajo conveniente que combina grid-row-gap y grid-column-gap en una sola propiedad. -> similar a width?*/

    grid-column-gap: 10px;
    grid-row-gap: 10px;
    /*LO MISMO*/
    column-gap: 10px;
    row-gap: 10px;

    /* SHORTHAND*/
    grid-gap: 10px 20px; /*filas, columnas*/
    grid-gap: 10px; /*10px para ambos*/
    /*LO MISMO*/ 
    gap: 10px;
/*--------------------------------------------------------------------------------*/
/*Las propiedades grid-column-start y grid-column-end en CSS Grid se utilizan para especificar la ubicación de inicio y finalización de un elemento en el eje de las columnas dentro de una cuadrícula.

grid-column-start: Define en qué línea de columna debe comenzar un elemento dentro de la cuadrícula.
grid-column-end: Define en qué línea de columna debe terminar un elemento dentro de la cuadrícula.*/

    grid-column-start: 1;
    grid-column-end: 3;
    
    grid-row-start: 1;
    grid-row-end: 3;

    /* SHORTHAND*/
    grid-column: 1 / 3;
    grid-row: 3 / span 5; /*    probar span mañana gg*/

    /* .grid-item:nth-child(10) {
        grid-column: span 3;
    } */
/*------------------ELEMENTOS IMPLICITOS-----------------*/

/*-> grid-auto-rows: Define la altura predeterminada de las
filas generadas automáticamente en la cuadrícula.*/
    grid-auto-rows: 150px;
    
/*-> grid-auto-columns: Define el ancho predeterminado de
las columnas generadas automáticamente en la cuadrícula*/
    grid-auto-columns: 1fr;

/*-> grid-auto-flow: Determina cómo se colocan automáticamente los elementos (implicitios) que no tienen una posición explícita definida por grid-column y grid-row. Puede tener los valores row, column, dense u otros*/
    grid-auto-flow: row;
    grid-auto-flow: column;
    grid-auto-flow: dense; /*Rellena los lugares vacios provacados por el grid implicito*/

/*Estas propiedades son útiles cuando tienes elementos en tu cuadrícula que no tienen una posición explícita y se deben colocar automáticamente. grid-auto-rows y grid-auto-columns establecen el tamaño predeterminado de las filas y columnas generadas automáticamente, y grid-auto-flow determina cómo se llenan esas celdas automáticas (ya sea en filas o columnas).*/

/*---------------hasta aca (implicitos)---------------------------------------------------------*/

/*Se aplican a los elementos individuales dentro de la cuadrícula. Controla la alineación en el eje principal (justify-items) afectando a todos los elementos dentro de la cuadrícula..*/

    justify-items: start;
    justify-items: end;
    justify-items: center;

    /*Los elementos se estiran para llenar el
    espacio de la celda en el eje principal.*/
    justify-items: stretch; /*defecto*/

/*+++++++++++++++++++*/
/*Se aplican a los elementos individuales dentro de la cuadrícula. Controla en el eje transversal (align-items) afectando a todos los elementos dentro de la cuadrícula.*/

    align-items: start;
    align-items: end;
    align-items: center;

    /*Los elementos se estiran para llenar el
    espacio de la celda en el eje transversal.*/
    align-items: stretch;

/*SHORTHAND*/
    /*place-items: <align-items> <justify-items>;*/
    place-items: center stretch;

/*----------------------------*/ 
/*Se aplican al contenedor de la cuadrícula en sí, no a los elementos individuales.
Controla (justify-content) en el espacio disponible dentro del contenedor de la cuadrícula.*/

    justify-content: start;
    justify-content: end;
    justify-content: center;

    justify-content: space-around;
    justify-content: space-between;
    justify-content: space-evenly;

    justify-content: stretch;
/*++++++++*/
/*Se aplican al contenedor de la cuadrícula en sí, no a los elementos individuales. Controla cómo se
distribuyen las filas (align-content) en el espacio disponible dentro del contenedor de la cuadrícula.*/

    align-content: start;
    align-content: end;
    align-content: center;

    align-content: space-around;
    align-content: space-between;
    align-content: space-evenly;

    align-content: stretch;

/*-----------------------------------------*/ 
/*Las propiedades align-self y justify-self en CSS Grid se utilizan para controlar la alineación de un elemento específico dentro de una cuadrícula, anulando las propiedades align-items y justify-items que se aplican al contenedor de la cuadrícula.*/

    /*Controla la alineación del elemento en el eje transversal (vertical) dentro de su 
    celda en la cuadrícula. Puede tener los valores start, end, center, stretch, y otros.*/
    align-self: start;
    align-self: end;
    align-self: center;

    align-self: stretch;
/*++++++++*/
    /*Controla la alineación del elemento en el eje principal (horizontal) dentro de su celda 
    en la cuadrícula. Puede tener los valores start, end, center, stretch, y otros.*/
    justify-self: start;
    justify-self: end;
    justify-self: center;

    justify-self: stretch;

/*Reemplaza a align-self y justify-self.
-> Lo hace en una sola linea -> SHORTHAND*/

    /*align, justify*/
    place-self: end end; 
/*----------------------------*/
/*Funciona como en flex-box, es para intercambiar celdas de la cuadricula*/
    order: 1;

    /*Se le aplica al container*/
    grid-template-areas:
    "header header header"
    "aside main main"
    "aside main main"
    "aside main main"
    "aside main main"
    "footer footer fotter";

    /*Se le aplica a los hijos*/
    grid-area: header;
    grid-area: main;
    grid-area: aside;
    grid-area: footer;
}